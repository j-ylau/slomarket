[{"/Users/jlau/Code-2023/cpmarketplace/src/app/AuthProvider.js":"1","/Users/jlau/Code-2023/cpmarketplace/src/app/RootLayout.js":"2","/Users/jlau/Code-2023/cpmarketplace/src/app/about/page.js":"3","/Users/jlau/Code-2023/cpmarketplace/src/app/api/auth/[...nextauth]/route.js":"4","/Users/jlau/Code-2023/cpmarketplace/src/app/api/search/[id]/route.js":"5","/Users/jlau/Code-2023/cpmarketplace/src/app/api/search/route.js":"6","/Users/jlau/Code-2023/cpmarketplace/src/app/api/verify/[id]/route.js":"7","/Users/jlau/Code-2023/cpmarketplace/src/app/create-listing/page.js":"8","/Users/jlau/Code-2023/cpmarketplace/src/app/layout.js":"9","/Users/jlau/Code-2023/cpmarketplace/src/app/listing/[id]/page.js":"10","/Users/jlau/Code-2023/cpmarketplace/src/app/login/page.js":"11","/Users/jlau/Code-2023/cpmarketplace/src/app/page.js":"12","/Users/jlau/Code-2023/cpmarketplace/src/app/profile/[id]/page.js":"13","/Users/jlau/Code-2023/cpmarketplace/src/app/search/page.js":"14","/Users/jlau/Code-2023/cpmarketplace/src/app/setup/page.js":"15","/Users/jlau/Code-2023/cpmarketplace/src/app/signup/page.js":"16","/Users/jlau/Code-2023/cpmarketplace/src/components/Catalog.js":"17","/Users/jlau/Code-2023/cpmarketplace/src/components/Categories.js":"18","/Users/jlau/Code-2023/cpmarketplace/src/components/FilterComponent.js":"19","/Users/jlau/Code-2023/cpmarketplace/src/components/Filters/RadiusFilter.js":"20","/Users/jlau/Code-2023/cpmarketplace/src/components/Filters/SortFilter.js":"21","/Users/jlau/Code-2023/cpmarketplace/src/components/Filters/VerifiedFilter.js":"22","/Users/jlau/Code-2023/cpmarketplace/src/components/Footer.js":"23","/Users/jlau/Code-2023/cpmarketplace/src/components/Hero.js":"24","/Users/jlau/Code-2023/cpmarketplace/src/components/HeroInspiration.js":"25","/Users/jlau/Code-2023/cpmarketplace/src/components/HomeCardDemo.js":"26","/Users/jlau/Code-2023/cpmarketplace/src/components/HomeSubAction.js":"27","/Users/jlau/Code-2023/cpmarketplace/src/components/ListingCard.js":"28","/Users/jlau/Code-2023/cpmarketplace/src/components/NewItems.js":"29","/Users/jlau/Code-2023/cpmarketplace/src/components/ProfileTabs/AdminPanel.js":"30","/Users/jlau/Code-2023/cpmarketplace/src/components/ProfileTabs/FavoriteListings.js":"31","/Users/jlau/Code-2023/cpmarketplace/src/components/ProfileTabs/MyListings.js":"32","/Users/jlau/Code-2023/cpmarketplace/src/components/ProfileTabs/Settings.js":"33","/Users/jlau/Code-2023/cpmarketplace/src/components/Searchbar.js":"34","/Users/jlau/Code-2023/cpmarketplace/src/lib/auth.js":"35","/Users/jlau/Code-2023/cpmarketplace/src/lib/authOptions.js":"36","/Users/jlau/Code-2023/cpmarketplace/src/lib/db.js":"37","/Users/jlau/Code-2023/cpmarketplace/src/lib/firebaseUtils.js":"38","/Users/jlau/Code-2023/cpmarketplace/src/styles/theme.js":"39","/Users/jlau/Code-2023/cpmarketplace/src/app/edit-listing/[id]/page.js":"40"},{"size":1808,"mtime":1704077428040,"results":"41","hashOfConfig":"42"},{"size":7530,"mtime":1704077428040,"results":"43","hashOfConfig":"42"},{"size":1911,"mtime":1704077428040,"results":"44","hashOfConfig":"42"},{"size":165,"mtime":1696384960675,"results":"45","hashOfConfig":"42"},{"size":986,"mtime":1704086841165,"results":"46","hashOfConfig":"42"},{"size":2206,"mtime":1701216308240,"results":"47","hashOfConfig":"42"},{"size":1300,"mtime":1701276935482,"results":"48","hashOfConfig":"42"},{"size":14117,"mtime":1704077428041,"results":"49","hashOfConfig":"42"},{"size":517,"mtime":1701276935485,"results":"50","hashOfConfig":"42"},{"size":10542,"mtime":1704086724544,"results":"51","hashOfConfig":"42"},{"size":3888,"mtime":1704077428041,"results":"52","hashOfConfig":"42"},{"size":376,"mtime":1701216308241,"results":"53","hashOfConfig":"42"},{"size":11541,"mtime":1704077428042,"results":"54","hashOfConfig":"42"},{"size":7604,"mtime":1704077428042,"results":"55","hashOfConfig":"42"},{"size":13101,"mtime":1704077428042,"results":"56","hashOfConfig":"42"},{"size":5500,"mtime":1704077428042,"results":"57","hashOfConfig":"42"},{"size":1021,"mtime":1704077428043,"results":"58","hashOfConfig":"42"},{"size":1137,"mtime":1704077428043,"results":"59","hashOfConfig":"42"},{"size":2740,"mtime":1704077428043,"results":"60","hashOfConfig":"42"},{"size":386,"mtime":1701276935489,"results":"61","hashOfConfig":"42"},{"size":683,"mtime":1701276935490,"results":"62","hashOfConfig":"42"},{"size":423,"mtime":1701276935490,"results":"63","hashOfConfig":"42"},{"size":2451,"mtime":1704077428043,"results":"64","hashOfConfig":"42"},{"size":4532,"mtime":1704077428043,"results":"65","hashOfConfig":"42"},{"size":1609,"mtime":1704077428044,"results":"66","hashOfConfig":"42"},{"size":1932,"mtime":1704077428044,"results":"67","hashOfConfig":"42"},{"size":1251,"mtime":1704077428044,"results":"68","hashOfConfig":"42"},{"size":13513,"mtime":1704077428044,"results":"69","hashOfConfig":"42"},{"size":2175,"mtime":1704077428044,"results":"70","hashOfConfig":"42"},{"size":8553,"mtime":1704077428045,"results":"71","hashOfConfig":"42"},{"size":2918,"mtime":1704077428045,"results":"72","hashOfConfig":"42"},{"size":2995,"mtime":1704077428045,"results":"73","hashOfConfig":"42"},{"size":20330,"mtime":1704077428045,"results":"74","hashOfConfig":"42"},{"size":2404,"mtime":1701276935500,"results":"75","hashOfConfig":"42"},{"size":285,"mtime":1696384960676,"results":"76","hashOfConfig":"42"},{"size":1213,"mtime":1696384960676,"results":"77","hashOfConfig":"42"},{"size":224,"mtime":1704086870267,"results":"78","hashOfConfig":"42"},{"size":4230,"mtime":1704077428045,"results":"79","hashOfConfig":"42"},{"size":1122,"mtime":1701276935501,"results":"80","hashOfConfig":"42"},{"size":6605,"mtime":1704077428041,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1e5c7l0",{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jlau/Code-2023/cpmarketplace/src/app/AuthProvider.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/app/RootLayout.js",["174"],"\"use client\";\nimport React, { useState, useEffect } from \"react\";\nimport Footer from \"../components/Footer\";\nimport Searchbar from \"../components/Searchbar\";\nimport { ThemeProvider } from \"@mui/material/styles\";\nimport theme from \"../styles/theme\";\nimport AccountCircleIcon from \"@mui/icons-material/AccountCircle\";\nimport localFont from \"next/font/local\";\nimport Link from \"next/link\";\nimport {\n  AppBar,\n  CssBaseline,\n  Box,\n  Container,\n  Toolbar,\n  Typography,\n  Snackbar,\n  Alert,\n  IconButton,\n  Menu,\n  MenuItem,\n  Button,\n} from \"@mui/material\";\nimport { useAuth, isLoggedIn } from \"./AuthProvider\";\nimport { useRouter } from \"next/navigation\";\nimport AdbIcon from \"@mui/icons-material/Adb\";\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\nimport logo from \"../../public/logo.svg\";\nimport firebase from \"firebase/app\";\nimport { auth } from \"../../firebase/firebaseConfig\";\n\n// Configure sans font\nconst sans = localFont({\n  src: \"../../public/fonts/PTSans-Regular.ttf\",\n  weight: \"400\",\n  style: \"normal\",\n});\n\nexport default function RootLayout({ children, title }) {\n  const { isLoggedIn, getUser, signOut } = useAuth();\n  const [anchorEl, setAnchorEl] = useState(null);\n  const isMenuOpen = Boolean(anchorEl);\n  const [snackbar, setSnackbar] = useState({ open: false, message: \"\" });\n  const router = useRouter();\n  const firebaseAuth = useAuth();\n  const isFirebaseLoggedIn = firebaseAuth.currentUser !== null;\n\n  const handleProfileMenuOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleViewProfileClick = () => {\n    handleMenuClose();\n    const userId = getUser().uid;\n    router.push(`/profile/${userId}`);\n  };\n\n  const handleCreateListingClick = () => {\n    console.log(\"Context isLoggedIn:\", isLoggedIn());\n    console.log(\"Firebase isLoggedIn:\", isFirebaseLoggedIn);\n\n    if (isFirebaseLoggedIn) {\n      router.push(\"/create-listing\");\n    } else {\n      router.push(\"/login\");\n    }\n  };\n\n  const renderMenu = () => (\n    <Menu anchorEl={anchorEl} open={isMenuOpen} onClose={handleMenuClose}>\n      {isLoggedIn() ? (\n        <div>\n          <MenuItem onClick={handleViewProfileClick}>View Profile</MenuItem>\n          {/* <MenuItem onClick={handleMenuClose}>Settings</MenuItem> */}\n          <MenuItem\n            onClick={() => {\n              handleMenuClose();\n              signOut();\n              router.push(\"/\"); // Redirect to the home page after logout\n              setSnackbar({ open: true, message: \"Successfully logged out\" }); \n            }}\n          >\n            Log Out\n          </MenuItem>\n        </div>\n      ) : (\n        <div>\n          <MenuItem component={Link} href=\"/login\" onClick={handleMenuClose}>\n            Log In\n          </MenuItem>\n          <MenuItem component={Link} href=\"/signup\" onClick={handleMenuClose}>\n            Sign Up\n          </MenuItem>\n        </div>\n      )}\n    </Menu>\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline>\n        <main className={sans.className}>\n          <Box display=\"flex\" flexDirection=\"column\" minHeight=\"100vh\">\n            <AppBar position=\"static\">\n              <Container maxWidth=\"xl\">\n                <Toolbar\n                  disableGutters\n                  sx={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"space-between\",\n                  }}\n                >\n                  <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\n                    <Link\n                      href=\"/\"\n                      style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        textDecoration: \"none\",\n                      }}\n                    >\n                      <img\n                        src={logo}\n                        alt=\"Logo\"\n                        style={{ height: \"40px\", marginRight: \"10px\" }} // Adjust the height as needed\n                      />\n                      <Typography\n                        variant=\"h6\"\n                        noWrap\n                        component=\"a\"\n                        href=\"/\"\n                        sx={{\n                          mr: 2,\n                          display: { xs: \"flex\", md: \"flex\" },\n                          fontFamily: \"monospace\",\n                          fontWeight: 700,\n                          letterSpacing: \".1rem\",\n                          color: \"white\",\n                          textDecoration: \"none\",\n                          lineHeight: \"inherit\", // Adjust the line height to align with the logo\n                        }}\n                      >\n                        {title}\n                      </Typography>\n                    </Link>\n                  </Box>\n\n                  <Box\n                    sx={{\n                      flexGrow: 1,\n                      display: \"flex\",\n                      justifyContent: { md: \"center\" },\n                    }}\n                  >\n                    <Searchbar\n                      sx={{\n                        width: {\n                          xs: \"calc(100% - 120px)\",\n                          sm: \"60%\",\n                          md: \"40%\",\n                        }, \n                        // mx: { xs: 1, sm: 2 },\n                      }}\n                    />\n                  </Box>\n\n                  <Box sx={{ flexGrow: 0 }}>\n                    <Button\n                      variant=\"contained\"\n                      color=\"secondary\"\n                      sx={{\n                        mx: 2, \n                        display: { xs: \"none\", sm: \"inline-flex\" }, // Hide on xs, show on sm and above\n                        maxWidth: { xs: \"100px\", sm: \"none\" },\n                      }}\n                      onClick={handleCreateListingClick}\n                    >\n                      <strong>Create Listing</strong>\n                    </Button>\n\n                    <IconButton\n                      color=\"inherit\"\n                      onClick={handleProfileMenuOpen}\n                      sx={{\n                        p: { xs: 0, sm: 1 }, \n                      }}\n                    >\n                      <AccountCircleIcon\n                        fontSize=\"large\"\n                        sx={{ color: \"white\" }}\n                      />\n                      <ArrowDropDownIcon\n                        fontSize=\"large\"\n                        sx={{ color: \"white\" }}\n                      />\n                    </IconButton>\n                  </Box>\n                </Toolbar>\n              </Container>\n            </AppBar>\n            {renderMenu()}\n            {/* Main content area */}\n            <Box component=\"main\" sx={{ flexGrow: 1 }}>\n              {children}\n            </Box>\n\n            {/* Footer */}\n            <Box component=\"footer\" sx={{ height: \"100vh\" }}>\n              <Footer />\n            </Box>\n            <Snackbar\n              open={snackbar.open}\n              autoHideDuration={6000}\n              onClose={() => setSnackbar({ ...snackbar, open: false })}\n            >\n              <Alert\n                onClose={() => setSnackbar({ ...snackbar, open: false })}\n                severity=\"success\"\n                sx={{ width: \"100%\" }}\n              >\n                {snackbar.message}\n              </Alert>\n            </Snackbar>\n          </Box>\n        </main>\n      </CssBaseline>\n    </ThemeProvider>\n  );\n}\n","/Users/jlau/Code-2023/cpmarketplace/src/app/about/page.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/app/api/auth/[...nextauth]/route.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/app/api/search/[id]/route.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/app/api/search/route.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/app/api/verify/[id]/route.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/app/create-listing/page.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/app/layout.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/app/listing/[id]/page.js",["175","176","177"],"\"use client\";\nimport { useParams } from \"next/navigation\";\nimport { useEffect, useState } from \"react\";\nimport {\n  CircularProgress,\n  Grid,\n  Typography,\n  Paper,\n  Box,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Breadcrumbs,\n  Link,\n  Card,\n  CardMedia,\n  CardContent,\n  IconButton,\n} from \"@mui/material\";\n// import SwipeableViews from \"react-swipeable-views\";\n// import { virtualize } from \"react-swipeable-views-utils\";\nimport ShareIcon from \"@mui/icons-material/Share\";\nimport { db } from \"../../../../firebase/firebaseConfig\";\nimport { doc, getDoc, updateDoc } from \"firebase/firestore\";\nimport LocationOnIcon from \"@mui/icons-material/LocationOn\";\nimport GoogleMapReact from \"google-map-react\";\nimport { useRouter } from \"next/navigation\";\nimport { useAuth } from \"../../AuthProvider\";\nimport { getUser } from \"@/lib/firebaseUtils\";\n\n// const VirtualizeSwipeableViews = virtualize(SwipeableViews);\n\nconst ListingPage = () => {\n  const router = useRouter();\n  const { id } = useParams();\n  const [listing, setListing] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [sellerInfo, setSellerInfo] = useState(null);\n  const [currentUserOwnsProfile, setCurrentUserOwnsProfile] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAdminStatus, setIsAdminStatus] = useState(false);\n  const [isFavorited, setFavorited] = useState(false);\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [isDialogOpen, setDialogOpen] = useState(false);\n  const [selectedImageUrl, setSelectedImageUrl] = useState(null);\n  const [user, setUser] = useState({ isAdmin: false, isStudent: false });\n\n  const { getUser: getCurrentUser, isLoggedIn, isAdmin } = useAuth();\n\n  const [selectedImage, setSelectedImage] = useState(0);\n\n  const handleImageSelect = (index) => {\n    setSelectedImage(index);\n  };\n\n  useEffect(() => {\n    if (id) {\n      const fetchListing = async () => {\n        setLoading(true);\n        try {\n          const docRef = doc(db, \"listings\", id);\n          const docSnap = await getDoc(docRef);\n\n          if (docSnap.exists()) {\n            setListing({ id: docSnap.id, ...docSnap.data() });\n          } else {\n            setError(\"Listing not found\");\n          }\n        } catch (err) {\n          setError(\"An error occurred while fetching the listing\");\n          console.error(err);\n        } finally {\n          setLoading(false);\n        }\n      };\n\n      fetchListing();\n    }\n  }, [id]);\n\n  useEffect(() => {\n    const fetchSellerInfo = async () => {\n      if (listing && listing.sellerId) {\n        try {\n          // Correcting the path to match the Firestore structure\n          const contactRef = doc(\n            db,\n            \"users\",\n            listing.sellerId,\n            \"private\",\n            \"contact\"\n          );\n          const contactSnap = await getDoc(contactRef);\n\n          if (contactSnap.exists()) {\n            const sellerData = contactSnap.data();\n            // so we're not checking contactInfoVisibility here\n            setSellerInfo({\n              email: sellerData.email,\n              phoneNumber: sellerData.phoneNumber,\n              location: sellerData.location,\n            });\n          } else {\n            console.error(\"Seller contact information not found\");\n          }\n        } catch (error) {\n          console.error(\"Error fetching seller contact information:\", error);\n        }\n      }\n    };\n\n    if (listing) {\n      fetchSellerInfo();\n    }\n  }, [listing]);\n\n  useEffect(() => {\n    if (isLoggedIn()) {\n    }\n    const user = getCurrentUser();\n    console.log(user);\n\n    if (user == null) {\n      console.log(\"user not logged in\");\n    } else {\n      setLoggedIn(true);\n      getUser(user.uid)\n        .then((userData) => {\n          if (!userData) {\n            setUser(userData);\n            setIsLoading(false);\n            return;\n          }\n\n          if (userData.profileImage == \"\") {\n            userData.profileImage = null;\n          }\n          if (userData.heroImage == \"\") {\n            userData.heroImage = null;\n          }\n          userData[\"uid\"] = user.uid;\n\n          if (isLoggedIn()) {\n            const currentUser = getCurrentUser();\n            if (currentUser.uid == user.uid) {\n              setCurrentUserOwnsProfile(true);\n\n              if (\n                currentUser.emailVerified &&\n                currentUser.email.split(\"@\").pop() == \"calpoly.edu\" &&\n                !userData.isStudent\n              ) {\n                fetch(`/api/verify/${user.uid}`, { method: \"put\" }).catch(\n                  (err) => {\n                    console.error(err);\n                    setErrorMessage(err.message);\n                  }\n                );\n              }\n            } else {\n              isAdmin()\n                .then((admin) => {\n                  if (admin) {\n                    setCurrentUserOwnsProfile(true);\n                  }\n                })\n                .catch((err) => {\n                  console.error(err);\n                  setErrorMessage(err.message);\n                });\n            }\n          }\n\n          const checkAdminStatus = async () => {\n            const adminStatus = await isAdmin();\n            setIsAdminStatus(adminStatus);\n          };\n\n          if (isLoggedIn()) {\n            checkAdminStatus();\n          }\n\n          setUser(userData);\n          setIsLoading(false);\n\n          console.log(userData);\n          if (userData.favoriteListings.includes(id)) {\n            setFavorited(true);\n          }\n        })\n        .catch((err) => {\n          console.error(err);\n          setErrorMessage(err.message);\n        });\n    }\n  }, [isLoggedIn, isAdmin]);\n\n  const handleFavorite = async () => {\n    console.log(user);\n    user.favoriteListings.push(id);\n\n    const favoritesRef = doc(db, \"users\", user.uid, \"private\", \"favorites\");\n\n    await updateDoc(favoritesRef, {\n      favoriteListings: user.favoriteListings,\n    });\n\n    setFavorited(true);\n  };\n\n  const handleUnfavorite = async () => {\n    console.log(user);\n    const index = user.favoriteListings.indexOf(id);\n    const random = user.favoriteListings.splice(index);\n\n    const favoritesRef = doc(db, \"users\", user.uid, \"private\", \"favorites\");\n\n    await updateDoc(favoritesRef, {\n      favoriteListings: user.favoriteListings,\n    });\n\n    setFavorited(false);\n  };\n\n  const renderSlide = ({ index, key }) => {\n    const imageUrl = listing.images[index];\n    return (\n      <img\n        key={key}\n        src={imageUrl}\n        alt={`${listing.title} - image ${index + 1}`}\n        style={{\n          maxWidth: \"700px\",\n          maxHeight: \"700px\",\n          width: \"auto\",\n          height: \"auto\",\n          cursor: \"pointer\",\n        }}\n        onClick={() => {\n          setSelectedImageUrl(imageUrl);\n          setDialogOpen(true);\n        }}\n      />\n    );\n  };\n\n  if (loading) {\n    return (\n      <Grid\n        container\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        style={{ height: \"100vh\" }}\n      >\n        <CircularProgress />\n      </Grid>\n    );\n  }\n\n  if (error) {\n    return (\n      <Typography variant=\"h6\" color=\"error\" textAlign=\"center\">\n        {error}\n      </Typography>\n    );\n  }\n\n  if (!listing) {\n    return null;\n  }\n\n  return (\n    <Box sx={{ padding: 30 }}>\n      {/* <Breadcrumbs aria-label=\"breadcrumb\">\n        <Link underline=\"hover\" color=\"inherit\" href=\"/\">\n          Home\n        </Link>\n        <Typography color=\"text.primary\">{listing.title}</Typography>\n      </Breadcrumbs> */}\n\n      <Paper elevation={3} sx={{ mt: 2, p: 2 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          {listing.title}\n        </Typography>\n\n        {/* {listing.images && listing.images.length > 0 && (\n          <VirtualizeSwipeableViews slideRenderer={renderSlide} />\n        )} */}\n\n        <Typography variant=\"body1\" gutterBottom>\n          {listing.description}\n        </Typography>\n        <Typography variant=\"h6\" gutterBottom>\n          Price: ${listing.price}\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n          Location: {listing.location}\n        </Typography>\n\n        {sellerInfo && (\n          <Card\n            sx={{ maxWidth: 345, cursor: \"pointer\" }}\n            onClick={() => router.push(`/profile/${listing.sellerId}`)}\n          >\n            <CardContent>\n              <Typography gutterBottom variant=\"h5\" component=\"div\">\n                Contact Seller\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Email: {sellerInfo.email}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Phone: {sellerInfo.phoneNumber}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Location: {sellerInfo.location}\n              </Typography>\n            </CardContent>\n          </Card>\n        )}\n\n        <Box sx={{ display: \"flex\", justifyContent: \"space-between\", mt: 2 }}>\n          {/* <Button\n            variant=\"contained\"\n            startIcon={<LocationOnIcon />}\n            onClick={() => {}}\n          >\n            View on Map\n          </Button> */}\n\n          {!isFavorited && loggedIn && (\n            <Button variant=\"contained\" onClick={handleFavorite}>\n              Favorite\n            </Button>\n          )}\n\n          {isFavorited && loggedIn && (\n            <Button variant=\"contained\" onClick={handleUnfavorite}>\n              Unfavorite\n            </Button>\n          )}\n\n          {/* <Button\n            variant=\"outlined\"\n            startIcon={<ShareIcon />}\n            onClick={() => {}}\n          >\n            Share\n          </Button> */}\n        </Box>\n      </Paper>\n      <Dialog\n        open={isDialogOpen}\n        onClose={() => setDialogOpen(false)}\n        aria-labelledby=\"image-dialog-title\"\n        maxWidth=\"md\" // Adjust size as needed\n      >\n        <DialogTitle id=\"image-dialog-title\">Image View</DialogTitle>\n        <DialogContent>\n          <img\n            src={selectedImageUrl}\n            alt=\"Enlarged View\"\n            style={{ width: \"100%\", height: \"auto\" }} \n          />\n        </DialogContent>\n        <DialogActions>\n          <Button variant=\"contained\" onClick={() => setDialogOpen(false)}>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default ListingPage;\n","/Users/jlau/Code-2023/cpmarketplace/src/app/login/page.js",["178"],"\"use client\";\nimport { useState } from \"react\";\nimport {\n  Box,\n  Grid,\n  Button,\n  TextField,\n  Alert,\n  Paper,\n  Typography,\n  Link,\n} from \"@mui/material\";\nimport { auth } from \"../../../firebase/firebaseConfig\";\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\nimport { useRouter } from \"next/navigation\";\nimport logo from \"../../../public/logo.svg\";\n\nexport default function Signin() {\n  const [formValues, setFormValues] = useState({ email: \"\", password: \"\" });\n  const [error, setError] = useState(false);\n\n  const router = useRouter();\n\n  function reset() {\n    setError(false);\n    setFormValues({ email: \"\", password: \"\" });\n  }\n\n  async function handleSignin(event) {\n    event.preventDefault();\n    const email = formValues.email;\n    const password = formValues.password;\n\n    await signInWithEmailAndPassword(auth, email, password)\n      .then((res) => {\n        const userid = res.user.uid;\n        router.push(\"/profile/\" + userid);\n      })\n      .catch((err) => {\n        reset();\n        console.log(err);\n        setError(err.message);\n      });\n  }\n\n  function handleChange({ field, value }) {\n    setFormValues({ ...formValues, [field]: value });\n  }\n\n  return (\n    <>\n      <Grid container component=\"main\" sx={{ height: \"100vh\" }}>\n        <Grid\n          item\n          xs={false}\n          sm={4}\n          md={7}\n          sx={{\n            backgroundImage:\n              \"url(https://source.unsplash.com/random?wallpapers)\",\n            backgroundRepeat: \"no-repeat\",\n            backgroundColor: (t) =>\n              t.palette.mode === \"light\"\n                ? t.palette.grey[50]\n                : t.palette.grey[900],\n            backgroundSize: \"cover\",\n            backgroundPosition: \"center\",\n          }}\n        />\n        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n          <Box\n            sx={{\n              width: 0.5,\n              margin: \"auto\",\n              textAlign: \"center\",\n              height: \"100vh\",\n            }}\n          >\n            <img\n              src={logo}\n              alt=\"Logo\"\n              style={{ width: \"300px\" }} \n            />\n            <Typography variant=\"h5\" pb={6}>\n              <strong>Log into your account.</strong>\n            </Typography>\n            <form>\n              {error ? (\n                <Alert severity=\"error\">\n                  There was an issue signing in! Check email and password.\n                </Alert>\n              ) : null}\n\n              <TextField\n                variant=\"outlined\"\n                autoFocus\n                margin=\"dense\"\n                id=\"email\"\n                label=\"Email Address\"\n                type=\"email\"\n                fullWidth\n                value={formValues.email}\n                onChange={(e) =>\n                  handleChange({ field: \"email\", value: e.target.value })\n                }\n                error={formValues.email?.error}\n              />\n              <br></br>\n              <TextField\n                variant=\"outlined\"\n                margin=\"dense\"\n                id=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                fullWidth\n                value={formValues.password}\n                onChange={(e) =>\n                  handleChange({ field: \"password\", value: e.target.value })\n                }\n              />\n              <br></br>\n              <br></br>\n              <Typography variant=\"body2\">\n                Dont have an account? <Link href=\"/signup\">Create one</Link>\n              </Typography>\n            </form>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ marginTop: \"20px\" }}\n              onClick={(e) => handleSignin(e)}\n            >\n              Login\n            </Button>\n          </Box>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n","/Users/jlau/Code-2023/cpmarketplace/src/app/page.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/app/profile/[id]/page.js",["179"],"\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport {\n  Avatar,\n  Alert,\n  Tooltip,\n  Divider,\n  Typography,\n  Box,\n  Grid,\n  Tabs,\n  Stack,\n  Tab,\n  Paper,\n  CircularProgress,\n  IconButton, \n  Menu,\n  MenuItem,\n} from \"@mui/material\";\nimport { useRouter } from \"next/navigation\";\nimport { useAuth } from \"../../AuthProvider\";\nimport { sendEmailVerification } from \"firebase/auth\";\nimport { getUser } from \"@/lib/firebaseUtils\";\nimport PersonIcon from \"@mui/icons-material/Person\";\nimport SchoolIcon from \"@mui/icons-material/School\";\nimport BanIcon from \"@mui/icons-material/Block\"; \nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport ReportIcon from \"@mui/icons-material/Report\";\nimport ShareIcon from \"@mui/icons-material/Share\";\nimport MoreVertIcon from \"@mui/icons-material/MoreVert\";\nimport VerifiedIcon from \"@mui/icons-material/CheckCircle\"; \nimport MyListings from \"../../../components/ProfileTabs/MyListings\";\nimport Settings from \"../../../components/ProfileTabs/Settings\";\nimport FavoriteListings from \"../../../components/ProfileTabs/FavoriteListings\";\nimport AdminPanel from \"../../../components/ProfileTabs/AdminPanel\"; \n// AdminBadge component\nconst AdminBadge = () => (\n  <Typography color=\"error\" component=\"span\">\n    (Admin)\n  </Typography>\n);\n\nexport default function Profile({ params }) {\n  const [user, setUser] = useState({ isAdmin: false, isStudent: false });\n  const [currentUserOwnsProfile, setCurrentUserOwnsProfile] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [errorMessage, setErrorMessage] = useState();\n  const [isAdminStatus, setIsAdminStatus] = useState(false);\n  const [currentTab, setCurrentTab] = useState(0);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const openMenu = Boolean(anchorEl);\n  const [heroImage, setHeroImage] = useState(\n    \"https://www.calpoly.edu/sites/calpoly.edu/files/inline-images/20210403-SpringScenics-JoeJ0020.jpg\"\n  );\n  const [isDialogOpen, setIsDialogOpen] = useState(false); \n  const [isLoginSuccess, setIsLoginSuccess] = useState(false);\n\n  // Handlers for menu\n  const handleClickMenu = (event) => {\n    // console.log(event.currentTarget); \n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleCloseMenu = () => {\n    setAnchorEl(null);\n  };\n\n  const defaultHeroImage =\n    \"https://www.calpoly.edu/sites/calpoly.edu/files/inline-images/20210403-SpringScenics-JoeJ0020.jpg\";\n\n  const { getUser: getCurrentUser, isLoggedIn, isAdmin } = useAuth();\n  const router = useRouter();\n\n  // Redirect to the home screen after 5 seconds\n  useEffect(() => {\n    if (isLoginSuccess) {\n      const redirectTimer = setTimeout(() => {\n        router.push(`/home`); \n      }, 5000); // 5 seconds\n\n      // Cleanup the timer to avoid memory leaks\n      return () => clearTimeout(redirectTimer);\n    }\n  }, [isLoginSuccess, router]);\n\n  const userId = params.id;\n\n  const handleTabChange = (event, newValue) => {\n    // console.log(newValue);\n    setCurrentTab(newValue);\n  };\n\n  const resendVerificationEmail = async () => {\n    const currentUser = getCurrentUser();\n    await sendEmailVerification(currentUser).catch((err) => {\n      console.error(err);\n      setErrorMessage(err.message);\n    });\n  };\n\n  // Get user data\n  useEffect(() => {\n    getUser(userId)\n      .then((userData) => {\n        if (!userData) {\n          setUser(userData);\n          setIsLoading(false);\n          return;\n        }\n\n        if (userData.profileImage == \"\") {\n          userData.profileImage = null;\n        }\n        if (userData.heroImage == \"\") {\n          userData.heroImage = null;\n        }\n        userData[\"uid\"] = userId;\n\n        if (isLoggedIn()) {\n          const currentUser = getCurrentUser();\n          if (currentUser.uid == userId) {\n            setCurrentUserOwnsProfile(true);\n\n            if (\n              currentUser.emailVerified &&\n              currentUser.email.split(\"@\").pop() == \"calpoly.edu\" &&\n              !userData.isStudent\n            ) {\n              // Tell server to set user as student\n              fetch(`/api/verify/${userId}`, { method: \"put\" }).catch((err) => {\n                console.error(err);\n                setErrorMessage(err.message);\n              });\n            }\n          } else {\n            isAdmin()\n              .then((admin) => {\n                if (admin) {\n                  setCurrentUserOwnsProfile(true);\n                }\n              })\n              .catch((err) => {\n                console.error(err);\n                setErrorMessage(err.message);\n              });\n          }\n        }\n\n        const checkAdminStatus = async () => {\n          const adminStatus = await isAdmin();\n          setIsAdminStatus(adminStatus);\n        };\n\n        if (isLoggedIn()) {\n          checkAdminStatus();\n        }\n\n        // console.log(userData);\n        // console.log(user);\n\n        setUser(userData);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        console.error(err);\n        setErrorMessage(err.message);\n      });\n  }, [isLoggedIn, isAdmin]);\n\n  if (!isLoading) {\n    if (!user) {\n      return (\n        <Box\n          sx={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            padding: \"20px\", \n            border: \"2px solid #ff0000\", \n            borderRadius: \"8px\",\n            backgroundColor: \"#ffeeee\", \n          }}\n        >\n          <Typography variant=\"h6\" color=\"error\" margin={30}>\n            User not found!\n          </Typography>\n        </Box>\n      );\n    }\n\n    if (user.name == \"\") {\n      if (currentUserOwnsProfile) {\n        // Send to profile setup page\n        router.push(`/setup`);\n        return;\n      }\n      return (\n        <Box\n          sx={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            padding: \"20px\", \n            border: \"2px solid #ff0000\", \n            borderRadius: \"8px\", \n            backgroundColor: \"#ffeeee\",\n          }}\n        >\n          <Typography variant=\"h6\" color=\"error\" margin={30}>\n            User has not set up their page yet!\n          </Typography>\n        </Box>\n      );\n    }\n  }\n\n  // Display a success message after successful login\n  if (isLoginSuccess) {\n    return (\n      <Box\n        sx={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}\n      >\n        <Typography variant=\"h4\" gutterBottom>\n          You are now logged in!\n        </Typography>\n        <Typography>\n          You will be redirected to the home screen in 5 seconds...\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box\n      sx={{\n        height: \"100vh\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n      }}\n    >\n      {/* Hero Section */}\n      {!isLoading && (\n        <Box\n          // elevation={1}\n          sx={{\n            width: \"100%\",\n            height: 300,\n            backgroundImage: user.heroImage\n              ? `url(${user.heroImage})`\n              : `url(${defaultHeroImage})`,\n            backgroundSize: \"cover\",\n            backgroundPosition: \"center\",\n            position: \"relative\",\n          }}\n        />\n      )}\n      {/* Error Messages */}\n      {errorMessage && <Alert severity=\"error\">{errorMessage}</Alert>}\n      {/* Profile Info */}\n      {isLoading ? (\n        <CircularProgress sx={{ height: \"100vh\" }} />\n      ) : (\n        <Grid\n          container\n          spacing={2}\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          mt={3}\n        >\n          <Grid item>\n            <Avatar\n              alt=\"Profile Picture\"\n              src={user.profileImage}\n              sx={{ width: 80, height: 80 }}\n            >\n              <PersonIcon />\n            </Avatar>\n          </Grid>\n          <Grid item>\n            <Typography variant=\"h4\" gutterBottom>\n              {user.name}\n              {user.isVerified && (\n                <Tooltip title=\"The user is a verified student.\">\n                  <VerifiedIcon color=\"primary\" />\n                </Tooltip>\n              )}\n              {user.isAdmin && <AdminBadge />}{\" \"}\n              {/* Display the Admin badge if user is an admin */}\n            </Typography>\n            <Stack direction=\"row\">\n              <Typography variant=\"subtitle1\">Seller</Typography>\n              <Tooltip title=\"User is a student\">\n                <Box pl={1}>{user.isStudent && <SchoolIcon />}</Box>\n              </Tooltip>\n            </Stack>\n          </Grid>\n\n          {(user.email || user.phoneNumber || user.location) &&\n          <Grid item>\n            <Grid container pl={2}>\n              <Grid item>\n                <Typography variant=\"body1\">\n                  {user.email}\n                </Typography>\n\n                <Typography variant=\"body1\">\n                  {user.phoneNumber}\n                </Typography>\n\n                <Typography variant=\"body1\">\n                  {user.location}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>}\n\n          <Grid item xs={12} sm={\"auto\"}>\n            {/* User actions */}\n            <IconButton aria-label=\"User Actions\" onClick={handleClickMenu}>\n              <MoreVertIcon />\n            </IconButton>\n\n            <Menu\n              id=\"long-menu\"\n              anchorEl={anchorEl}\n              open={Boolean(anchorEl)}\n              onClose={handleCloseMenu}\n            >\n              {/* {isAdminStatus && ( */}\n              <>\n                {/* <MenuItem\n                    onClick={() => handleUserActions(\"ban\")}\n                    sx={{ color: \"red\" }}\n                  >\n                    <BanIcon /> Restrict User Actions\n                  </MenuItem> */}\n                <MenuItem\n                  onClick={() => handleUserActions(\"delete\")}\n                  sx={{ color: \"red\" }}\n                >\n                  <DeleteIcon /> Delete Account\n                </MenuItem>\n              </>\n              {/* )} */}\n              {/* <MenuItem onClick={() => handleUserActions(\"report\")}>\n                <ReportIcon /> Report User\n              </MenuItem> */}\n              {/* <MenuItem onClick={() => handleUserActions(\"share\")}>\n                <ShareIcon /> Share Profile\n              </MenuItem> */}\n            </Menu>\n          </Grid>\n        </Grid>\n      )}\n      <Divider sx={{ my: 2, width: \"100%\" }} />\n    {/* Tabs */}\n    <Tabs value={currentTab} onChange={handleTabChange} centered>\n        <Tab label=\"Listings\" />\n        {currentUserOwnsProfile && <Tab label=\"Settings\" />}\n        {currentUserOwnsProfile && <Tab label=\"Favorites\" />}\n        {currentUserOwnsProfile && <Tab label=\"Purchase History\" />}\n        {currentUserOwnsProfile && user.isAdmin && <Tab label=\"Admin Panel\" />} {/* Conditional Admin Panel Tab */}\n      </Tabs>\n\n      {/* Tab Content */}\n      {currentTab === 0 && !isLoading && <MyListings user={user} />}\n      {currentTab === 1 && !isLoading && currentUserOwnsProfile && (\n        <Settings user={user} setUser={setUser} setCurrentTab={setCurrentTab} />\n      )}\n      {currentTab === 2 && !isLoading && currentUserOwnsProfile && (\n        <FavoriteListings user={user} />\n      )}\n      {currentTab === 3 && !isLoading && currentUserOwnsProfile && (\n        <div>Not implemented yet</div>\n      )}\n      {currentTab === 4 && !isLoading && user.isAdmin && (\n        <AdminPanel user={user} />\n      )} {/* Conditional rendering of Admin Panel content */}\n    </Box>\n  );\n}\n","/Users/jlau/Code-2023/cpmarketplace/src/app/search/page.js",["180"],"\"use client\";\nexport const dynamic = \"force-static\";\n// pages/search.js\nimport React, { useEffect, useState } from \"react\";\nimport { useSearchParams } from \"next/navigation\";\nimport { collection, getDocs } from \"firebase/firestore\";\nimport { db } from \"../../../firebase/firebaseConfig\";\nimport ListingCard from \"../../components/ListingCard\";\nimport NewItems from \"../../components/NewItems\";\nimport FilterComponent from \"../../components/FilterComponent\";\nimport Categories from \"../../components/Categories\";\nimport {\n  Box,\n  Typography,\n  Grid,\n  CircularProgress,\n  Stack,\n  Pagination,\n  Button,\n} from \"@mui/material\";\nimport AddCircleOutlineIcon from \"@mui/icons-material/AddCircleOutline\";\n\n// Helper function to calculate distance between two coordinates\nfunction getDistanceFromLatLonInMiles(lat1, lon1, lat2, lon2) {\n  const R = 3958.8; // Radius of the earth in miles\n  const dLat = deg2rad(lat2 - lat1);\n  const dLon = deg2rad(lon2 - lon1);\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(deg2rad(lat1)) *\n      Math.cos(deg2rad(lat2)) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // Distance in miles\n}\n\nfunction deg2rad(deg) {\n  return deg * (Math.PI / 180);\n}\n\nconst SearchPage = () => {\n  const searchParams = useSearchParams();\n  const [searchResults, setSearchResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(1);\n  const [filters, setFilters] = useState({\n    sort: \"\",\n    radius: 5,\n    verified: false,\n  });\n  const itemsPerPage = 20;\n\n  useEffect(() => {\n    const searchQuery = searchParams.get(\"query\");\n    // console.log(\"Search query:\", searchQuery);\n    if (searchQuery) {\n      performSearch(searchQuery);\n    }\n  }, [searchParams]); // Only re-run the effect if searchParams changes\n\n  const performSearch = async (searchTerm) => {\n    setLoading(true);\n\n    try {\n      const listingsRef = collection(db, \"listings\");\n      let matches = [];\n\n      const querySnapshot = await getDocs(listingsRef);\n      querySnapshot.forEach((doc) => {\n        try {\n          const data = doc.data();\n          // console.log(\"Checking document\", doc.id);\n          // Apply filters here\n          if (passesFilters(data, searchTerm)) {\n            matches.push({ id: doc.id, ...data });\n          }\n        } catch (error) {\n          console.error(\"Error processing document\", doc.id, error);\n        }\n      });\n\n      // Sort and filter based on additional criteria\n      matches = applyAdditionalFilters(matches);\n\n      // console.log(matches);\n      setSearchResults(matches);\n    } catch (error) {\n      console.error(\"Error fetching search results: \", error);\n    }\n\n    setLoading(false);\n  };\n\n  // Pagination change handler\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n    // performSearch should be modified to take into account pagination\n  };\n\n  // Add a function to handle filter changes\n  const handleFilterChange = (newFilters) => {\n    setFilters(newFilters);\n    performSearch(searchParams.get(\"query\"));\n  };\n\n  const passesFilters = (data, searchTerm) => {\n    const lowerCaseSearchTerm = searchTerm.toLowerCase();\n    const searchMatch =\n      data.description.toLowerCase().includes(lowerCaseSearchTerm) ||\n      data.category.toLowerCase().includes(lowerCaseSearchTerm) ||\n      data.title.toLowerCase().includes(lowerCaseSearchTerm); // Added title check\n\n    const verifiedMatch =\n      !filters.verified || (filters.verified && data.studentVerification);\n\n    // Implement location-based matching if necessary\n    const locationMatch = true;\n    return searchMatch && verifiedMatch && locationMatch;\n  };\n  const applyAdditionalFilters = (results) => {\n    // Sort by price\n    if (filters.sort === \"priceLowest\") {\n      results.sort((a, b) => parseFloat(a.price) - parseFloat(b.price));\n    } else if (filters.sort === \"priceHighest\") {\n      results.sort((a, b) => parseFloat(b.price) - parseFloat(a.price));\n    }\n\n    // Sort by date if newest is selected\n    if (filters.sort === \"newest\") {\n      results.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n    }\n\n    // Apply radius-based filtering if location and radius are available and radius is set\n    if (filters.userLocation && filters.radius) {\n      results = results.filter((item) => {\n        const distance = getDistanceFromLatLonInMiles(\n          filters.userLocation.latitude,\n          filters.userLocation.longitude,\n          item.location.latitude, \n          item.location.longitude\n        );\n        return distance <= parseFloat(filters.radius);\n      });\n    }\n\n    return results;\n  };\n  const renderSearchResults = () => {\n    if (loading) {\n      return (\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n          <CircularProgress />\n        </Box>\n      );\n    } else if (searchResults.length === 0) {\n      return (\n        <Box textAlign=\"center\" p={30}>\n          <Typography variant=\"h5\" gutterBottom>\n            No listings for {searchParams.get(\"query\")}. Make one from here!\n          </Typography>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<AddCircleOutlineIcon />}\n            href=\"create-listing\"\n          >\n            Create Listing\n          </Button>\n        </Box>\n      );\n    } else {\n      return (\n        <Box p={0}>\n          <Grid container spacing={2}>\n            {searchResults\n              .slice((page - 1) * itemsPerPage, page * itemsPerPage)\n              .map((result, index) => {\n                // Extract city and state from the location string\n                // const locationArray = result.location.split(\", \");\n                // const cityState = `${locationArray[1]}, ${locationArray[2]}`;\n\n                return (\n                  <Grid\n                    item\n                    xs={12}\n                    sm={12}\n                    md={4}\n                    lg={3}\n                    xl={2.4}\n                    key={result.id}\n                  >\n                    <ListingCard\n                      loading={loading}\n                      listingId={result.id}\n                      title={result.title}\n                      createdAt={result.createdAt}\n                      updatedAt={result.updatedAt}\n                      description={result.description}\n                      images={result.images} // images is an array of URLs\n                      location={result.location}\n                      price={result.price}\n                      studentVerification={result.studentVerification}\n                      priceHistory={result.priceHistory} // priceHistory is an array of objects with date and price\n                    />\n                  </Grid>\n                );\n              })}\n          </Grid>\n          {/* Pagination control */}\n          <Stack spacing={2} alignItems=\"center\" marginY={5}>\n            <Pagination\n              count={Math.ceil(searchResults.length / itemsPerPage)}\n              page={page}\n              onChange={handleChangePage}\n            />\n          </Stack>\n        </Box>\n      );\n    }\n  };\n\n  return (\n    <Box p={3}>\n      <FilterComponent onFilterChange={handleFilterChange} />\n      <Categories />\n      <Typography variant=\"h4\" sx={{ marginBottom: 2, color: \"#2B7257\" }}>\n        <strong>Searching for: {searchParams.get(\"query\")}</strong>\n      </Typography>\n      {renderSearchResults()}\n      <NewItems />\n    </Box>\n  );\n};\n\nexport default SearchPage;\n","/Users/jlau/Code-2023/cpmarketplace/src/app/setup/page.js",["181","182"],"\"use client\";\n\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport {\n  Alert,\n  Avatar,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Grid,\n  IconButton,\n  TextField,\n  Typography,\n  Paper,\n  Autocomplete,\n} from \"@mui/material\";\nimport PersonIcon from \"@mui/icons-material/Person\";\nimport ImageIcon from \"@mui/icons-material/Image\";\nimport { useDropzone } from \"react-dropzone\";\nimport { useRouter } from \"next/navigation\";\nimport { useAuth } from \"../AuthProvider\";\nimport { sendEmailVerification } from \"firebase/auth\";\nimport { updateUser, uploadImage } from \"../../lib/firebaseUtils\";\n\nconst californiaCities = [\n  \"Los Angeles\",\n  \"San Diego\",\n  \"San Jose\",\n  \"San Francisco\",\n  \"San Luis Obispo\",\n  \"Pismo Beach\",\n  \"Morro Bay\",\n  \"Arroyo Grande\",\n  \"Atascadero\",\n  \"Paso Robles\",\n  \"Grover Beach\",\n  \"Cambria\",\n  \"Templeton\",\n  \"Nipomo\",\n  \"Cayucos\",\n];\n\nexport default function Profile() {\n  const [formState, setFormState] = useState({});\n  const [errorMessage, setErrorMessage] = useState();\n  const [isStudent, setIsStudent] = useState(false);\n  const [emailVerified, setEmailVerified] = useState(false);\n  const [profileImage, setProfileImage] = useState([]); // Stored as [file, objectUrl]\n  const [heroImage, setHeroImage] = useState([]); // Stored as [file, objectUrl]\n  const [isProfileImageDialogOpen, setIsProfileImageDialogOpen] =\n    useState(false);\n  const [isHeroDialogOpen, setIsHeroDialogOpen] = useState(false);\n  const [locationInput, setLocationInput] = useState(\"\");\n  const { getUser, isLoggedIn } = useAuth();\n  const router = useRouter();\n\n  const onProfileImageDrop = useCallback((acceptedFiles) => {\n    const file = acceptedFiles[0];\n    const objectUrl = URL.createObjectURL(file);\n    setProfileImage([file, objectUrl]); // Set the uploaded image as the hero image\n    setIsProfileImageDialogOpen(false); // Close the dialog\n  }, []);\n\n  const onHeroDrop = useCallback((acceptedFiles) => {\n    const file = acceptedFiles[0];\n    const objectUrl = URL.createObjectURL(file);\n    setHeroImage([file, objectUrl]); // Set the uploaded image as the hero image\n    setIsHeroDialogOpen(false); // Close the dialog\n  }, []);\n\n  const {\n    getRootProps: getProfileImageRootProps,\n    getInputProps: getProfileImageInputProps,\n  } = useDropzone({\n    onDrop: onProfileImageDrop,\n    maxFiles: 1,\n    accept: {\n      \"image/*\": [\".jpeg\", \".jpg\", \".png\"],\n    },\n  });\n\n  const { getRootProps: getHeroRootProps, getInputProps: getHeroInputProps } =\n    useDropzone({\n      onDrop: onHeroDrop,\n      maxFiles: 1,\n      accept: {\n        \"image/*\": [\".jpeg\", \".jpg\", \".png\"],\n      },\n    });\n\n  const handleChangeProfileImage = () => {\n    setIsProfileImageDialogOpen(true);\n  };\n\n  const handleChangeHero = () => {\n    setIsHeroDialogOpen(true);\n  };\n\n  const handleProfileImageDialogClose = () => {\n    setIsProfileImageDialogOpen(false);\n  };\n\n  const handleHeroDialogClose = () => {\n    setIsHeroDialogOpen(false);\n  };\n\n  const resendVerificationEmail = async () => {\n    const user = getUser();\n    await sendEmailVerification(user).catch((err) => {\n      console.error(err);\n      setErrorMessage(err.message);\n    });\n  };\n\n  async function handleSetupSubmit(event) {\n    event.preventDefault();\n    const data = new FormData(event.currentTarget);\n\n    const name = data.get(\"name\");\n    const phoneNumber = data.get(\"phoneNumber\");\n    const location = data.get(\"location\");\n\n    const user = getUser();\n    const userId = user.uid;\n\n    if (!event.currentTarget.reportValidity()) {\n      setErrorMessage(\n        \"Keep name and location under 64 characters, and phone number under 16 characters.\"\n      );\n      return false;\n    }\n\n    // Validate phone number with regex\n    if (\n      phoneNumber &&\n      !phoneNumber.match(\n        /^(\\+\\d{1,2}\\s?)?1?\\-?\\.?\\s?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/\n      )\n    ) {\n      setErrorMessage();\n      setFormState({\n        ...formState,\n        phoneNumber: {\n          error: true,\n          message: \"Your phone number is not formatted correctly.\",\n        },\n      });\n      return false;\n    }\n\n    // Upload images\n    let profileImageURL = \"\";\n    let heroImageURL = \"\";\n\n    if (profileImage.length != 0) {\n      try {\n        profileImageURL = await uploadImage(userId, profileImage[0]);\n      } catch (err) {\n        console.error(err);\n        setErrorMessage(err.message);\n        return false;\n      }\n    }\n\n    if (heroImage.length != 0) {\n      try {\n        heroImageURL = await uploadImage(userId, heroImage[0]);\n      } catch (err) {\n        console.error(err);\n        setErrorMessage(err.message);\n        return false;\n      }\n    }\n\n    // Update the user with the new data\n    await updateUser(userId, {\n      name,\n      phoneNumber,\n      location: locationInput, // Use locationInput state here\n      profileImage: profileImageURL,\n      heroImage: heroImageURL,\n    })\n      .then(() => {\n        // Send to profile page\n        router.push(`/profile/${userId}`);\n      })\n      .catch((err) => {\n        console.error(err);\n        setErrorMessage(err.message);\n      });\n\n    // Check if all required fields are filled\n    if (!name || !phoneNumber || !location) {\n      setErrorMessage(\"Please fill in all required fields.\");\n      return false;\n    }\n\n    // Validate phone number with regex\n    if (\n      phoneNumber &&\n      !phoneNumber.match(/^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/)\n    ) {\n      setErrorMessage(\"Your phone number is not formatted correctly.\");\n      setFormState({\n        ...formState,\n        phoneNumber: {\n          error: true,\n          message: \"Your phone number is not formatted correctly.\",\n        },\n      });\n      return false;\n    }\n\n    return false;\n  }\n\n  const handleLocationChange = (event, newValue) => {\n    setLocationInput(newValue);\n  };\n\n  useEffect(() => {\n    if (!isLoggedIn()) {\n      router.push(\"/login\");\n      return;\n    }\n\n    const user = getUser();\n    if (user.email.split(\"@\").pop() == \"calpoly.edu\") {\n      setIsStudent(true);\n\n      // If the email has already been verified for some reason (page refresh)\n      if (user.emailVerified) {\n        setEmailVerified(true);\n      }\n    }\n  }, []);\n\n  // Email verification doesn't trigger onAuthStateChange,\n  // so just check every couple seconds.\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (isLoggedIn()) {\n        getUser().reload();\n        const user = getUser();\n        if (user.emailVerified) {\n          // Tell server to set user as student\n          fetch(`/api/verify/${user.uid}`, { method: \"put\" }).catch((err) => {\n            console.error(err);\n            setErrorMessage(err.error);\n          });\n\n          setEmailVerified(true);\n\n          // Stop checking for email verification\n          clearInterval(interval);\n        }\n      }\n    }, 2000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div style={{ height: \"100vh\" }}>\n      <h1 style={{ textAlign: \"center\" }}>Set Up Profile</h1>\n      <form\n        onSubmit={handleSetupSubmit}\n        style={{\n          padding: 2,\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }}\n      >\n        {isStudent && !emailVerified && (\n          <>\n            <Alert severity=\"warning\">\n              Check your email to verify your student status!\n            </Alert>\n            <Button onClick={resendVerificationEmail}>Resend email</Button>\n          </>\n        )}\n\n        {isStudent && emailVerified && (\n          <Alert severity=\"success\">Your email has been verified!</Alert>\n        )}\n\n        {errorMessage && <Alert severity=\"error\">{errorMessage}</Alert>}\n\n        <Grid\n          container\n          spacing={2}\n          columnSpacing={8}\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          mt={3}\n        >\n          <Grid item>\n            <Typography align=\"center\">Profile Picture</Typography>\n            <IconButton onClick={handleChangeProfileImage}>\n              <Paper\n                elevation={3}\n                sx={{\n                  width: 100,\n                  height: 100,\n                  backgroundImage: `url(${profileImage[1]})`,\n                  backgroundSize: \"cover\",\n                  backgroundPosition: \"center\",\n                  position: \"relative\",\n                  borderRadius: \"50%\",\n                }}\n              >\n                {!profileImage[1] && (\n                  <Avatar\n                    alt=\"Banner\"\n                    sx={{ width: 100, height: 100 }}\n                    variant=\"circular\"\n                  >\n                    <PersonIcon />\n                  </Avatar>\n                )}\n              </Paper>\n            </IconButton>\n          </Grid>\n\n          <Grid item>\n            <Typography align=\"center\">Banner Image</Typography>\n            <IconButton onClick={handleChangeHero} sx={{ borderRadius: 0 }}>\n              <Paper\n                elevation={3}\n                sx={{\n                  width: 200,\n                  height: 100,\n                  backgroundImage: `url(${heroImage[1]})`,\n                  backgroundSize: \"cover\",\n                  backgroundPosition: \"center\",\n                  position: \"relative\",\n                }}\n              >\n                {!heroImage[1] && (\n                  <Avatar\n                    alt=\"Banner\"\n                    sx={{ width: 200, height: 100 }}\n                    variant=\"square\"\n                  >\n                    <ImageIcon />\n                  </Avatar>\n                )}\n              </Paper>\n            </IconButton>\n          </Grid>\n        </Grid>\n\n        <br></br>\n        <div style={{ width: \"30%\" }}>\n          <TextField\n            margin=\"dense\"\n            variant=\"outlined\"\n            id=\"name\"\n            name=\"name\"\n            label=\"Name\"\n            type=\"text\"\n            required\n            fullWidth\n            inputProps={{ maxLength: 64 }}\n          />\n          <br></br>\n          <TextField\n            margin=\"dense\"\n            name=\"phoneNumber\"\n            id=\"phoneNumber\"\n            label=\"Phone Number\"\n            type=\"tel\"\n            fullWidth\n            required\n            error={formState.phoneNumber?.error}\n            helperText={formState.phoneNumber?.message}\n            variant=\"outlined\"\n            inputProps={{ maxLength: 16 }}\n          />\n          <br></br>\n          <Autocomplete\n            value={locationInput}\n            onChange={handleLocationChange}\n            id=\"location\"\n            options={californiaCities}\n            getOptionLabel={(option) => option}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                label=\"Location\"\n                margin=\"dense\"\n                variant=\"outlined\"\n                required\n              />\n            )}\n          />\n          <br></br>\n          <br></br>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            sx={{\n              backgroundColor: \"4FB18C\",\n            }}\n          >\n            Complete Setup\n          </Button>\n        </div>\n      </form>\n\n      <Dialog\n        open={isProfileImageDialogOpen}\n        onClose={handleProfileImageDialogClose}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {\"Upload Profile Image\"}\n        </DialogTitle>\n        <DialogContent>\n          <div\n            {...getProfileImageRootProps()}\n            style={{\n              border: \"1px dashed gray\",\n              padding: \"20px\",\n              cursor: \"pointer\",\n            }}\n          >\n            <input {...getProfileImageInputProps()} />\n            <Typography variant=\"body1\">\n              Drag & drop an image here, or click to select one\n            </Typography>\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            autoFocus\n            onClick={handleProfileImageDialogClose}\n            color=\"primary\"\n          >\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <Dialog\n        open={isHeroDialogOpen}\n        onClose={handleHeroDialogClose}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">\n          {\"Upload Banner Image\"}\n        </DialogTitle>\n        <DialogContent>\n          <div\n            {...getHeroRootProps()}\n            style={{\n              border: \"1px dashed gray\",\n              padding: \"20px\",\n              cursor: \"pointer\",\n            }}\n          >\n            <input {...getHeroInputProps()} />\n            <Typography variant=\"body1\">\n              Drag & drop an image here, or click to select one\n            </Typography>\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleHeroDialogClose} color=\"primary\">\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/jlau/Code-2023/cpmarketplace/src/app/signup/page.js",["183"],"\"use client\";\nimport { useState } from \"react\";\nimport {\n  Box,\n  Grid,\n  Button,\n  TextField,\n  Alert,\n  Paper,\n  Typography,\n  Link,\n} from \"@mui/material\";\nimport { useRouter } from \"next/navigation\";\nimport { useAuth } from '../AuthProvider';\nimport { createUser } from '@/lib/firebaseUtils';\nimport { sendEmailVerification } from 'firebase/auth';\nimport logo from \"../../../public/logo.svg\";\n\nexport default function Signup() {\n  const [formState, setFormState] = useState({ email: \"\", password: \"\", passwordConfirmation: \"\" });\n  const [errorMessage, setErrorMessage] = useState();\n  const router = useRouter();\n  const { signUp } = useAuth();\n\n  async function handleSignup(event) {\n    event.preventDefault();\n    let validForm = event.currentTarget.reportValidity();\n    \n    const data = new FormData(event.currentTarget);\n    const email = data.get('email');\n    const password = data.get('password');\n    const passwordConfirmation = data.get('passwordConfirmation');\n\n    if (password != passwordConfirmation) {\n      setErrorMessage();\n      setFormState({...formState, passwordConfirmation: { error: true, message: \"Your passwords don't match.\" }});\n    } else if (!validForm || password.length < 6) {\n      setErrorMessage(\"Passwords must be at least 6 characters long\");\n      setFormState({...formState, passwordConfirmation: { error: false, message: \"\" }});\n    } else {\n      await signUp(email, password)\n      .then(async res => {\n        const user = res.user;\n        // Create user document\n        await createUser(user.uid, user.email).then(async () => {\n          if (user.email.split('@').pop() == \"calpoly.edu\") {\n            // Send verification email if user is a student\n            await sendEmailVerification(user).catch(err => {\n              console.error(err);\n              setErrorMessage(err.message);\n            });\n          }\n\n          // Send to profile setup page\n          router.push(`/setup`);\n        }).catch(err => {\n          console.error(err);\n          setErrorMessage(err.message);\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        setErrorMessage(err.message);\n      });\n    }\n    return false;\n  }\n\n  function handleChange({ field, value }) {\n    setFormState({ ...formState, [field]: value });\n  }\n\n  return (\n    <>\n      <Grid container component=\"main\" sx={{ height: \"100vh\" }}>\n        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n          <Box\n            sx={{\n              width: 0.5,\n              margin: \"auto\",\n              textAlign: \"center\",\n              height: \"100vh\",\n            }}\n          >\n            <img\n              src={logo}\n              alt=\"Logo\"\n              style={{ width: \"300px\" }}\n            />\n            <Typography variant=\"h5\" pb={6}>\n              <strong>Sign Up for an account.</strong>\n            </Typography>\n            \n            <Alert severity=\"info\">\n              Use your calpoly.edu email to get a verified account!\n            </Alert>\n            \n            <form onSubmit={handleSignup}>\n              {errorMessage && (\n                <Alert severity=\"error\">{errorMessage}</Alert>\n              )}\n\n              <TextField\n                autoFocus\n                margin=\"dense\"\n                id=\"email\"\n                label=\"Email Address\"\n                type=\"email\"\n                name=\"email\"\n                fullWidth\n                value={formState.email}\n                onChange={(e) =>\n                  handleChange({ field: \"email\", value: e.target.value })\n                }\n                error={formState.email?.error}\n              />\n              <br />\n              <TextField\n                margin=\"dense\"\n                id=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                name=\"password\"\n                fullWidth\n                value={formState.password}\n                onChange={(e) =>\n                  handleChange({ field: \"password\", value: e.target.value })\n                }\n              />\n              <br />\n              <TextField\n                margin=\"dense\"\n                id=\"passwordConfirmation\"\n                label=\"Password Confirmation\"\n                type=\"password\"\n                name=\"passwordConfirmation\"\n                fullWidth\n                value={formState.passwordConfirmation}\n                onChange={(e) =>\n                  handleChange({ field: \"passwordConfirmation\", value: e.target.value })\n                }\n                error={formState.passwordConfirmation?.error}\n                helperText={formState.passwordConfirmation?.message}\n              />\n              <br /><br />\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ marginTop: \"20px\" }}\n              >\n                Sign Up\n              </Button>\n            </form>\n          </Box>\n        </Grid>\n        <Grid\n          item\n          xs={false}\n          sm={4}\n          md={7}\n          sx={{\n            backgroundImage: \"url(https://source.unsplash.com/random?wallpapers)\",\n            backgroundRepeat: \"no-repeat\",\n            backgroundColor: (t) =>\n              t.palette.mode === \"light\"\n                ? t.palette.grey[50]\n                : t.palette.grey[900],\n            backgroundSize: \"cover\",\n            backgroundPosition: \"center\",\n          }}\n        />\n      </Grid>\n    </>\n  );\n}\n","/Users/jlau/Code-2023/cpmarketplace/src/components/Catalog.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/components/Categories.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/components/FilterComponent.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/components/Filters/RadiusFilter.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/components/Filters/SortFilter.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/components/Filters/VerifiedFilter.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/components/Footer.js",["184"],"import * as React from \"react\";\nimport Stack from \"@mui/material/Stack\";\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport Container from \"@mui/material/Container\";\nimport Link from \"@mui/material/Link\";\nimport Grid from \"@mui/material/Grid\";\nimport logo from \"../../public/footerlogo.svg\";\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n      {\"Copyright © \"}\n      <Link color=\"inherit\" to=\"https://slo.market/\">\n        SLOMarket\n      </Link>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nexport default function Footer() {\n  return (\n    <Box\n      component=\"footer\"\n      sx={{\n        py: 3,\n        px: 2,\n        mt: \"auto\",\n        backgroundImage: \"url(/assets/footer.png)\", \n        backgroundSize: \"cover\",\n        backgroundRepeat: \"no-repeat\",\n        height: \"100%\",\n      }}\n    >\n      <Container maxWidth=\"xl\">\n        <Grid container spacing={3} direction=\"column\" alignItems=\"center\">\n          <Grid item>\n            <img src={logo} alt=\"SLOMarket Logo\" style={{ maxWidth: \"100%\" }} />\n          </Grid>\n          <Grid item>\n            <Typography variant=\"h4\" align=\"center\">\n              <strong>\n                Connecting local students and merchants on one platform.\n              </strong>\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Stack mt={2} direction=\"row\" spacing={6}>\n              <Link to=\"#\" color=\"inherit\">\n                About Us\n              </Link>\n              <Link to=\"#\" color=\"inherit\">\n                How It Works\n              </Link>\n              <Link to=\"#\" color=\"inherit\">\n                Community Guidelines\n              </Link>\n              <Link to=\"#\" color=\"inherit\">\n                Support\n              </Link>\n            </Stack>\n          </Grid>\n          <Grid item>\n            <Stack mt={2} direction=\"row\" spacing={6}>\n              <Link to=\"#\" color=\"inherit\">\n                Facebook\n              </Link>\n              <Link to=\"#\" color=\"inherit\">\n                Twitter\n              </Link>\n              <Link to=\"#\" color=\"inherit\">\n                Instagram\n              </Link>\n            </Stack>\n          </Grid>\n          <Grid item>\n            <Box mt={5}>\n              <Copyright />\n            </Box>\n          </Grid>\n        </Grid>\n      </Container>\n    </Box>\n  );\n}\n","/Users/jlau/Code-2023/cpmarketplace/src/components/Hero.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/components/HeroInspiration.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/components/HomeCardDemo.js",["185"],"// components/HomeCardDemo.js\nimport React from 'react';\nimport { Box, Typography, Badge } from '@mui/material';\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\n\nfunction HomeCardDemo() {\n  return (\n    <Box sx={{\n      width: '100%', // Responsive width\n      borderRadius: '8px', \n      overflow: 'hidden', \n      cursor: 'pointer', \n      // boxShadow: '0px 0px 15px rgba(0, 0, 0, 0.1)', // subtle shadow\n    }}>\n      <Box sx={{ \n        position: 'relative', \n        width: '100%', \n        paddingTop: '56.25%', // 16:9 aspect ratio\n        }}>\n        <img \n          src=\"https://images.unsplash.com/photo-1517705008128-361805f42e86?auto=format&fit=crop&q=80&w=3487&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\" \n          alt=\"Product\" \n          style={{ \n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%', \n            height: '100%', \n            objectFit: 'cover', \n            borderRadius: '8px', // Rounded corners only at the top\n            boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.25)'\n          }}\n        />\n      </Box>\n      <Box sx={{ padding: 2 }}>\n        <Typography variant=\"h6\">White meeting chair</Typography>\n        <Typography variant=\"subtitle1\" color=\"textSecondary\" sx={{ marginBottom: 1 }}>ATASCADERO</Typography>\n        <Typography variant=\"h5\" sx={{ fontWeight: 'bold', marginBottom: 1 }}>$30</Typography>\n        <Badge color=\"success\" overlap=\"circular\" sx={{ marginRight: 1 }}>\n          <Typography variant=\"caption\">AVAILABLE FOR PICKUP</Typography>\n        </Badge>\n        <Box sx={{ display: 'flex', alignItems: 'center', marginTop: 1 }}>\n          <LocationOnIcon fontSize=\"small\" color=\"primary\" />\n          <Typography variant=\"caption\" color=\"textSecondary\" sx={{ marginLeft: 1 }}>1632 Foreman Ct</Typography>\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n\nexport default HomeCardDemo;\n","/Users/jlau/Code-2023/cpmarketplace/src/components/HomeSubAction.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/components/ListingCard.js",["186"],"import React, { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport {\n  Box,\n  Typography,\n  Badge,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  Stack,\n  Chip,\n  useTheme,\n  Snackbar,\n  Skeleton,\n  Alert,\n  useMediaQuery,\n} from \"@mui/material\";\nimport LocationOnIcon from \"@mui/icons-material/LocationOn\";\nimport SchoolIcon from \"@mui/icons-material/School\";\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\";\nimport copy from \"copy-to-clipboard\";\nimport moment from \"moment\"; \nimport { doc, deleteDoc } from \"firebase/firestore\";\nimport { getDoc, addDoc, collection, Timestamp } from \"firebase/firestore\";\nimport IconButton from \"@mui/material/IconButton\";\nimport { db } from \"../../firebase/firebaseConfig\";\nimport Menu from \"@mui/material/Menu\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport MoreVertIcon from \"@mui/icons-material/MoreVert\";\nimport ShareIcon from \"@mui/icons-material/Share\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { red } from \"@mui/material/colors\";\nimport FlagIcon from \"@mui/icons-material/Flag\"; \nimport FileCopyIcon from \"@mui/icons-material/FileCopy\";\nimport { useAuth } from \"../app/AuthProvider\";\n\nimport VisibilityIcon from \"@mui/icons-material/Visibility\";\n\nfunction ListingCard({\n  loading,\n  listingId,\n  title,\n  createdAt,\n  updatedAt,\n  description,\n  images,\n  isFree,\n  location,\n  price,\n  studentVerification,\n  priceHistory,\n}) {\n  const [open, setOpen] = useState(false);\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const [anchorEl, setAnchorEl] = useState(null);\n  const openMenu = Boolean(anchorEl);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState(\"\");\n  const router = useRouter();\n  const { isLoggedIn, isAdmin } = useAuth();\n  const user  = useAuth();\n\n  console.log(user.currentUser)\n\n  const handleBoxClick = () => {\n    router.push(`/listing/${listingId}`);\n  };\n\n  const handleSnackbarClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackbarOpen(false);\n  };\n\n  // Handlers for menu\n  const handleClickMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleCloseMenu = () => {\n    setAnchorEl(null);\n  };\n\n  const handleCopyListingId = () => {\n    // Copy the listingId to the clipboard\n    copy(listingId);\n\n    // Update snackbar message and open the snackbar\n    setSnackbarMessage(\"Listing ID copied to clipboard.\");\n    setSnackbarOpen(true);\n\n    // Close the menu\n    handleCloseMenu();\n  };\n\n  const handleDeleteListing = async (listingId) => {\n    if (!isAdmin) {\n      // User is not an admin, show an error message\n      setSnackbarMessage(\"You do not have permission to delete this listing. Contact support if you think this is an issue.\");\n      setSnackbarOpen(true);\n      return;\n    }\n  \n    try {\n      const listingRef = doc(db, \"listings\", listingId);\n      await deleteDoc(listingRef);\n      // Update snackbar message and open the snackbar\n      setSnackbarMessage(\"Listing deleted successfully.\");\n      setSnackbarOpen(true);\n    } catch (error) {\n      console.error(\"Error deleting listing: \", error);\n      // Show error alert\n      setSnackbarMessage(\"You do not have permission to delete listings. Contact support@slomarket.com if you think this is an issue.\");\n      setSnackbarOpen(true);\n    }\n  };\n  \n\n  const handleReportListing = () => {\n    // Logic for reporting the listing\n    console.log(\"Listing reported\");\n    setSnackbarMessage(\"Listing reported successfully.\");\n    setSnackbarOpen(true);\n    handleCloseMenu();\n  };\n\n  const handleTrackListing = () => {\n    // Logic for tracking the listing\n    console.log(\"Listing tracked\");\n    setSnackbarMessage(\"Listing tracked successfully.\");\n    setSnackbarOpen(true);\n    handleCloseMenu();\n  };\n\n  const handleShareListing = () => {\n    // Logic for sharing the listing\n    console.log(\"Listing shared\");\n    setSnackbarMessage(\"Listing shared successfully.\");\n    setSnackbarOpen(true);\n    handleCloseMenu();\n  };\n\n  const handleEditListing = async (listingId) => {\n    // Check if the user is logged in\n    if (!user || !user.currentUser) {\n      setSnackbarMessage(\"You must be logged in to edit a listing.\");\n      setSnackbarOpen(true);\n      return;\n    }\n  \n    // Get the admin status, which might be inside a 'claims' object or directly on the user object\n    // This will depend on how you're setting up admin roles on your authentication backend\n    const isAdmin = user.currentUser.admin || user.currentUser.claims?.admin;\n  \n    // Fetch the listing to check if the current user is the owner\n    const listingRef = doc(db, \"listings\", listingId);\n    const listingSnap = await getDoc(listingRef);\n    if (!listingSnap.exists()) {\n      setSnackbarMessage(\"Listing does not exist.\");\n      setSnackbarOpen(true);\n      return;\n    }\n    const listingData = listingSnap.data();\n  \n    // Verify if the user is the owner of the listing or an admin\n    const isOwner = user.currentUser.uid === listingData.sellerId;\n    \n    if (isOwner || isAdmin) {\n      router.push(`/edit-listing/${listingId}`);\n    } else {\n      setSnackbarMessage(\"You do not have permission to edit this listing.\");\n      setSnackbarOpen(true);\n    }\n  };\n  \n  \n\n  const firstImage =\n    Array.isArray(images) && images.length > 0\n      ? images[0]\n      : \"default-image-url\";\n\n  const formatDate = (timestamp) => {\n    if (!timestamp || !timestamp.seconds) return \"Unknown\"; \n    const date = new Date(timestamp.seconds * 1000);\n    const formattedDate = moment(date).format(\"MM/DD/YYYY\"); \n    return formattedDate !== \"Invalid date\" ? formattedDate : \"Unknown\"; \n  };\n\n  const formatPriceHistory = (history) => {\n    if (!Array.isArray(history)) {\n      return \"No price history available\";\n    }\n    return history\n      .map((entry) => `${entry.price} on ${formatDate(entry.date)}`)\n      .join(\"\\n\");\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const formatLocation = (locationString) => {\n    // Directly return the location string as it only contains the city name\n    return locationString;\n\n    // const parts = locationString.split(\", \");\n    // return parts.length > 2 ? `${parts[1]}, ${parts[2]}` : locationString;\n  };\n\n  if (loading) {\n    return (\n      <Box\n        sx={{\n          width: isMobile ? \"100%\" : 300,\n          minHeight: \"420px\",\n          borderRadius: \"8px\",\n          overflow: \"hidden\",\n          boxShadow: \"0px 0px 4px rgba(0, 0, 0, 0.25)\",\n          marginBottom: 2,\n          flexDirection: \"column\",\n          display: \"flex\",\n        }}\n      >\n        <Skeleton variant=\"rectangular\" width=\"100%\" height={118} />\n        <Box sx={{ p: 2 }}>\n          <Skeleton variant=\"text\" width=\"60%\" />\n          <Skeleton variant=\"text\" />\n          <Skeleton variant=\"text\" />\n          <Skeleton variant=\"text\" width=\"80%\" />\n        </Box>\n        <Box sx={{ p: 2, display: \"flex\", justifyContent: \"space-between\" }}>\n          <Skeleton variant=\"text\" width=\"40%\" />\n          <Skeleton variant=\"circular\" width={40} height={40} />\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <Box\n      sx={{\n        width: isMobile ? \"100%\" : 300,\n        height: \"460px\", \n        borderRadius: \"8px\",\n        overflow: \"hidden\",\n        boxShadow: \"0px 0px 4px rgba(0, 0, 0, 0.25)\",\n        marginBottom: 2,\n        flexDirection: \"column\",\n        display: \"flex\",\n        backgroundColor: \"white\",\n      }}\n    >\n      {/* Row for the menu icon */}\n      <Box\n        sx={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"flex-end\",\n          // p: 1,\n          // boxShadow: \"0px 0px 4px rgba(0, 0, 0, 0.25)\",\n          backgroundColor: \"white\",\n        }}\n      >\n        <IconButton\n          aria-label=\"settings\"\n          aria-controls=\"long-menu\"\n          aria-haspopup=\"true\"\n          onClick={handleClickMenu}\n          sx={{ margin: \"0 8px\" }} \n        >\n          <MoreVertIcon />\n        </IconButton>\n        <Menu\n          id=\"long-menu\"\n          anchorEl={anchorEl}\n          open={openMenu}\n          onClose={handleCloseMenu}\n        >\n          {/* <MenuItem onClick={handleShareListing}>\n            <ShareIcon fontSize=\"small\" sx={{ marginRight: 1 }} /> Copy Link to\n            Share\n          </MenuItem> */}\n          <MenuItem onClick={handleCopyListingId}>\n            <FileCopyIcon fontSize=\"small\" sx={{ marginRight: 1 }} /> Copy\n            Listing ID\n          </MenuItem>\n\n          {isLoggedIn && isAdmin && (\n            <MenuItem\n              onClick={() => handleDeleteListing(listingId)}\n              sx={{ color: red[500] }}\n            >\n              <DeleteIcon fontSize=\"small\" sx={{ marginRight: 1 }} /> Delete\n              Listing\n            </MenuItem>\n          )}\n          {/* <MenuItem onClick={() => handleEditListing(listingId)}>\n  <EditIcon fontSize=\"small\" sx={{ marginRight: 1 }} /> Edit Listing\n</MenuItem> */}\n\n          {/* Add the Report Listing menu item */}\n          {/* <MenuItem onClick={handleReportListing}>\n            <FlagIcon fontSize=\"small\" sx={{ marginRight: 1 }} /> Report Listing\n          </MenuItem> */}\n          {/* Add the Track Listing menu item */}\n          {/* <MenuItem onClick={handleTrackListing}>\n            <VisibilityIcon fontSize=\"small\" sx={{ marginRight: 1 }} /> Track\n            Listing\n          </MenuItem> */}\n        </Menu>\n      </Box>\n\n      {/* Clickable content container */}\n      <Box\n        sx={{\n          // p: 2,\n          flexGrow: 1,\n          cursor: \"pointer\",\n        }}\n        onClick={handleBoxClick}\n      >\n        <Box\n          sx={{\n            width: \"100%\",\n            position: \"relative\",\n            paddingTop: \"56.25%\" /* 16:9 aspect ratio */,\n          }}\n        >\n          <img\n            src={firstImage}\n            alt={title}\n            style={{\n              position: \"absolute\",\n              top: 0,\n              left: 0,\n              width: \"100%\",\n              height: \"100%\",\n              objectFit: \"cover\",\n              // boxShadow: \"0px 4px 4px rgba(0, 0, 0, 0.25)\",\n            }}\n          />\n        </Box>\n\n        <Box\n          sx={{ p: 2, flexGrow: 1 }}\n          style={{\n            backgroundColor: \"white\", \n          }}\n        >\n          <Typography\n            variant=\"h6\"\n            sx={{\n              fontWeight: \"bold\",\n              whiteSpace: \"nowrap\", // Prevent wrapping\n              overflow: \"hidden\", // Prevent showing overflow\n              textOverflow: \"ellipsis\", // Add ellipsis at the end\n            }}\n          >\n            {title}\n          </Typography>\n\n          <Typography variant=\"subtitle2\" color=\"textSecondary\" sx={{ mb: 1 }}>\n            {description}\n          </Typography>\n          <Typography\n            variant=\"body2\"\n            color=\"textSecondary\"\n            sx={{ fontStyle: \"italic\" }}\n          >\n            {`Created: ${formatDate(createdAt) || \"Not available\"}`}\n          </Typography>\n          {updatedAt && (\n            <Typography variant=\"caption\" color=\"textSecondary\">\n              {/* {`Updated: ${formatDate(updatedAt) || \"Not available\"}`} */}\n            </Typography>\n          )}\n        </Box>\n\n        <Stack\n          direction=\"row\"\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          sx={{\n            p: 2,\n            backgroundColor: \"white\", \n          }}\n        >\n          <Typography\n            variant=\"h5\"\n            sx={{ fontWeight: \"bold\", display: \"flex\", alignItems: \"center\" }}\n          >\n            {price === 0 ? (\n              <Chip icon={<CheckCircleIcon />} label=\"Free\" size=\"large\" />\n            ) : (\n              `$${Number(price).toFixed(2)}` // Coerce price to a number before calling toFixed\n            )}\n          </Typography>\n          {studentVerification && (\n            <Badge\n              badgeContent={<SchoolIcon color=\"primary\" />}\n              sx={{ mr: 4 }}\n              anchorOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n              }}\n            >\n              <Box /> {/* Placeholder for badge */}\n            </Badge>\n          )}\n        </Stack>\n\n        <Box\n          sx={{\n            p: 2,\n            display: \"flex\",\n            alignItems: \"center\",\n            backgroundColor: \"white\", \n          }}\n        >\n          <LocationOnIcon fontSize=\"small\" color=\"primary\" />\n          <Typography variant=\"caption\" color=\"textSecondary\" sx={{ ml: 1 }}>\n            {location}\n          </Typography>\n        </Box>\n      </Box>\n\n      <Dialog open={open} onClose={handleClose}>\n        <DialogTitle>Price History</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            {formatPriceHistory(priceHistory)}\n          </DialogContentText>\n        </DialogContent>\n      </Dialog>\n      <Snackbar\n        open={snackbarOpen}\n        autoHideDuration={6000}\n        onClose={handleSnackbarClose}\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"left\" }}\n      >\n        <Alert\n          onClose={handleSnackbarClose}\n          severity=\"success\"\n          sx={{ width: \"100%\" }}\n        >\n          {snackbarMessage}\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n}\n\nexport default ListingCard;\n","/Users/jlau/Code-2023/cpmarketplace/src/components/NewItems.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/components/ProfileTabs/AdminPanel.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/components/ProfileTabs/FavoriteListings.js",["187"],"import React, { useEffect, useState } from \"react\";\nimport { Grid, Box, Stack, Pagination } from \"@mui/material\";\nimport ListingCard from \"../ListingCard\";\nimport { collection, query, orderBy, getDocs, where, limit, documentId } from \"firebase/firestore\";\nimport { db } from \"../../../firebase/firebaseConfig\";\n\nexport default function FavoriteListings( {user} ) {\n  const [listings, setListings] = useState([]);\n  const [page, setPage] = useState(1);\n\n  const itemsPerPage = 10;\n\n  \n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const fetchListingsByIds = async (ids) => {\n    const q = query(\n      collection(db, \"listings\"),\n      where(documentId(), \"in\", ids),\n      limit(10)\n    );\n    const querySnapshot = await getDocs(q);\n    const items = [];\n    querySnapshot.forEach((doc) => {\n      items.push({ id: doc.id, ...doc.data() });\n    });\n    return items;\n  };\n\n  useEffect(() => {\n    const fetchListings = async () => {\n      const ids = user.favoriteListings;\n\n      \n      let idGroups = [];\n      for (let i = 0; i < ids.length; i += 10) {\n        idGroups.push(ids.slice(i, Math.min(i + 10, ids.length)));\n      }\n\n      let listingGroups = [];\n      for (const ids of idGroups) {\n        await fetchListingsByIds(ids).then(listingGroupRes => {\n          listingGroups.push(listingGroupRes);\n        }).catch(err => {\n          console.error(err);\n        });\n      }\n\n      let allListings = listingGroups.flat();\n\n      \n      allListings.sort((a, b) => {\n        return (b.createdAt.seconds - a.createdAt.seconds);\n      });\n      \n      setListings(allListings);\n    }\n\n    fetchListings();\n  }, []);\n\n  return (\n    <Box px={3} py={2}>\n      {/* Listing Section */}\n      <Grid container spacing={2}>\n        {listings.slice((page - 1) * itemsPerPage, page * itemsPerPage).map((item) => {\n          const locationArray = item.location.split(\", \");\n          const cityState =\n            locationArray.length > 2\n              ? `${locationArray[1]}, ${locationArray[2]}`\n              : item.location;\n\n          return (\n            <Grid item key={item.id}>\n              <ListingCard\n              listingId={item.id}\n                title={item.title}\n                createdAt={item.createdAt}\n                updatedAt={item.updatedAt}\n                description={item.description}\n                images={item.images}\n                location={cityState}\n                price={item.price}\n                studentVerification={item.studentVerification}\n                priceHistory={item.priceHistory}\n              />\n            </Grid>\n          );\n        })}\n      </Grid>\n      {/* Pagination control */}\n      <Stack spacing={2} alignItems=\"center\" marginY={5}>\n        <Pagination\n          count={Math.ceil(listings.length / itemsPerPage)}\n          page={page}\n          onChange={handleChangePage}\n        />\n      </Stack>\n    </Box>\n  );\n}\n","/Users/jlau/Code-2023/cpmarketplace/src/components/ProfileTabs/MyListings.js",["188","189"],"import React, { useEffect, useState } from \"react\";\nimport { Grid, Box, Stack, Typography, Pagination } from \"@mui/material\";\nimport ListingCard from \"../ListingCard\";\nimport { collection, query, orderBy, getDocs, where } from \"firebase/firestore\";\nimport { db } from \"../../../firebase/firebaseConfig\";\n\nimport NoListingsImage from \"/public/illustrations/standing-19.svg\"; \n\nexport default function MyListings({ user }) {\n  const [listings, setListings] = useState([]);\n  const [page, setPage] = useState(1);\n\n  const itemsPerPage = 5;\n\n  \n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  useEffect(() => {\n    const fetchListings = async () => {\n      const q = query(\n        collection(db, \"listings\"),\n        where(\"sellerId\", \"==\", user.uid),\n        orderBy(\"createdAt\", \"desc\")\n      );\n      const querySnapshot = await getDocs(q);\n      const items = [];\n      querySnapshot.forEach((doc) => {\n        items.push({ id: doc.id, ...doc.data() });\n      });\n      setListings(items);\n    };\n\n    fetchListings();\n  }, []);\n\n  return (\n    <Box px={3} py={2}>\n      {listings.length === 0 ? (\n        \n        <Box\n          display=\"flex\"\n          flexDirection=\"column\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          pb={10}\n        >\n          <img src={NoListingsImage} alt=\"No Listings\" />\n          <Typography pt={5} variant=\"h5\">\n            <strong>No listings found by {user.name}</strong>{\" \"}\n          </Typography>\n        </Box>\n      ) : (\n        <>\n          {/* Listing Section */}\n          <Grid container spacing={2}>\n            {listings\n              .slice((page - 1) * itemsPerPage, page * itemsPerPage)\n              .map((item) => {\n                const locationArray = item.location.split(\", \");\n                const cityState =\n                  locationArray.length > 2\n                    ? `${locationArray[1]}, ${locationArray[2]}`\n                    : item.location;\n      \n                return (\n                  <Grid item key={item.id}>\n                    <ListingCard\n                    listingId={item.id}\n                      title={item.title}\n                      createdAt={item.createdAt}\n                      updatedAt={item.updatedAt}\n                      description={item.description}\n                      images={item.images}\n                      location={cityState}\n                      price={item.price}\n                      studentVerification={item.studentVerification}\n                      priceHistory={item.priceHistory}\n                    />\n                  </Grid>\n                );\n              })}\n          </Grid>\n          {/* Pagination control */}\n          <Stack spacing={2} alignItems=\"center\" marginY={5}>\n            <Pagination\n              count={Math.ceil(listings.length / itemsPerPage)}\n              page={page}\n              onChange={handleChangePage}\n            />\n          </Stack>\n        </>\n      )}\n    </Box>\n  );\n}\n","/Users/jlau/Code-2023/cpmarketplace/src/components/ProfileTabs/Settings.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/components/Searchbar.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/lib/auth.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/lib/authOptions.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/lib/db.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/lib/firebaseUtils.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/styles/theme.js",[],"/Users/jlau/Code-2023/cpmarketplace/src/app/edit-listing/[id]/page.js",[],{"ruleId":"190","severity":1,"message":"191","line":127,"column":23,"nodeType":"192","endLine":131,"endColumn":25},{"ruleId":"193","severity":1,"message":"194","line":200,"column":6,"nodeType":"195","endLine":200,"endColumn":27,"suggestions":"196"},{"ruleId":"190","severity":1,"message":"191","line":232,"column":7,"nodeType":"192","endLine":247,"endColumn":9},{"ruleId":"190","severity":1,"message":"191","line":364,"column":11,"nodeType":"192","endLine":368,"endColumn":13},{"ruleId":"190","severity":1,"message":"191","line":79,"column":13,"nodeType":"192","endLine":83,"endColumn":15},{"ruleId":"193","severity":1,"message":"197","line":169,"column":6,"nodeType":"195","endLine":169,"endColumn":27,"suggestions":"198"},{"ruleId":"193","severity":1,"message":"199","line":60,"column":6,"nodeType":"195","endLine":60,"endColumn":20,"suggestions":"200"},{"ruleId":"193","severity":1,"message":"201","line":238,"column":6,"nodeType":"195","endLine":238,"endColumn":8,"suggestions":"202"},{"ruleId":"193","severity":1,"message":"203","line":262,"column":6,"nodeType":"195","endLine":262,"endColumn":8,"suggestions":"204"},{"ruleId":"190","severity":1,"message":"191","line":85,"column":13,"nodeType":"192","endLine":89,"endColumn":15},{"ruleId":"190","severity":1,"message":"191","line":40,"column":13,"nodeType":"192","endLine":40,"endColumn":81},{"ruleId":"190","severity":1,"message":"191","line":20,"column":9,"nodeType":"192","endLine":33,"endColumn":11},{"ruleId":"190","severity":1,"message":"191","line":338,"column":11,"nodeType":"192","endLine":350,"endColumn":13},{"ruleId":"193","severity":1,"message":"205","line":62,"column":6,"nodeType":"195","endLine":62,"endColumn":8,"suggestions":"206"},{"ruleId":"193","severity":1,"message":"207","line":36,"column":6,"nodeType":"195","endLine":36,"endColumn":8,"suggestions":"208"},{"ruleId":"190","severity":1,"message":"191","line":49,"column":11,"nodeType":"192","endLine":49,"endColumn":58},"@next/next/no-img-element","Do not use `<img>` element. Use `<Image />` from `next/image` instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getCurrentUser' and 'id'. Either include them or remove the dependency array.","ArrayExpression",["209"],"React Hook useEffect has missing dependencies: 'getCurrentUser' and 'userId'. Either include them or remove the dependency array.",["210"],"React Hook useEffect has a missing dependency: 'performSearch'. Either include it or remove the dependency array.",["211"],"React Hook useEffect has missing dependencies: 'getUser', 'isLoggedIn', and 'router'. Either include them or remove the dependency array.",["212"],"React Hook useEffect has missing dependencies: 'getUser' and 'isLoggedIn'. Either include them or remove the dependency array.",["213"],"React Hook useEffect has a missing dependency: 'user.favoriteListings'. Either include it or remove the dependency array.",["214"],"React Hook useEffect has a missing dependency: 'user.uid'. Either include it or remove the dependency array.",["215"],{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},"Update the dependencies array to be: [isLoggedIn, isAdmin, getCurrentUser, id]",{"range":"230","text":"231"},"Update the dependencies array to be: [isLoggedIn, isAdmin, userId, getCurrentUser]",{"range":"232","text":"233"},"Update the dependencies array to be: [performSearch, searchParams]",{"range":"234","text":"235"},"Update the dependencies array to be: [getUser, isLoggedIn, router]",{"range":"236","text":"237"},"Update the dependencies array to be: [getUser, isLoggedIn]",{"range":"238","text":"239"},"Update the dependencies array to be: [user.favoriteListings]",{"range":"240","text":"241"},"Update the dependencies array to be: [user.uid]",{"range":"242","text":"243"},[5731,5752],"[isLoggedIn, isAdmin, getCurrentUser, id]",[5037,5058],"[isLoggedIn, isAdmin, userId, getCurrentUser]",[1819,1833],"[performSearch, searchParams]",[6231,6233],"[getUser, isLoggedIn, router]",[6931,6933],"[getUser, isLoggedIn]",[1651,1653],"[user.favoriteListings]",[1056,1058],"[user.uid]"]